# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GrvWVd5SqGnc3nzGXAASlBa3MeD7Y66l
"""

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import pandas as pd
import pickle

# Load dataset
df = pd.read_csv("shopping_trends.csv")

# Copy dataset to avoid modifying original
data = df.copy()

# Encode categorical columns
label_encoders = {}
for col in data.select_dtypes(include='object').columns:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    label_encoders[col] = le

# Features (X) and Target (y)
X = data.drop(columns=['Subscription Status', 'Customer ID'])
y = data['Subscription Status']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Hyperparameter tuning
param_grid = {
    'n_neighbors': range(1, 21),
    'weights': ['uniform', 'distance'],
    'metric': ['euclidean', 'manhattan']
}

grid = GridSearchCV(
    KNeighborsClassifier(),
    param_grid,
    cv=5,
    scoring='accuracy',
    n_jobs=-1
)
grid.fit(X_train, y_train)

# Best parameters
print("Best Parameters:", grid.best_params_)

# Train final model
best_knn = grid.best_estimator_
best_knn.fit(X_train, y_train)

# Predict & evaluate
y_pred = best_knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Optimized KNN Accuracy:", accuracy)

# Save trained components AFTER training
pickle.dump(best_knn, open("knn_model.pkl", "wb"))
pickle.dump(scaler, open("scaler.pkl", "wb"))
pickle.dump(label_encoders, open("label_encoders.pkl", "wb"))

print("Model, scaler, and encoders saved successfully!")

